import { useState } from "react"import { Button } from "@/components/ui/button"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"import { Input } from "@/components/ui/input"import { Label } from "@/components/ui/label"import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"import { FileText, Download, Upload, Building2, User, Image, CheckCircle } from "lucide-react"import { Badge } from "@/components/ui/badge"import { toast } from "sonner"import { generateAllDocuments } from "@/lib/documentTemplates"import { ScrollArea } from "@/components/ui/scroll-area"interface CompanyInfo {  name: string  managerName: string  logo: string | null}interface Document {  id: string  title: string  category: string  phase: number  status: 'pending' | 'generated'  content?: string}export default function DocumentGenerator() {  const [companyInfo, setCompanyInfo] = useState<CompanyInfo>({    name: '',    managerName: '',    logo: null  })    const [documents, setDocuments] = useState<Document[]>([    // Phase 1 Documents    { id: 'charter', title: 'Project Charter', category: 'Governance', phase: 1, status: 'pending' },    { id: 'org-chart', title: 'Cybersecurity Organizational Chart', category: 'Governance', phase: 1, status: 'pending' },    { id: 'steering-charter', title: 'Steering Committee Charter', category: 'Governance', phase: 1, status: 'pending' },    { id: 'gap-analysis', title: 'Initial Gap Analysis Report', category: 'Assessment', phase: 1, status: 'pending' },        // Phase 2 Documents    { id: 'cyber-strategy', title: 'Cybersecurity Strategy', category: 'Strategy', phase: 2, status: 'pending' },    { id: 'cyber-policy', title: 'Cybersecurity Policy', category: 'Policy', phase: 2, status: 'pending' },    { id: 'aup', title: 'Acceptable Use Policy (AUP)', category: 'Policy', phase: 2, status: 'pending' },    { id: 'classification', title: 'Information Classification Policy', category: 'Policy', phase: 2, status: 'pending' },    { id: 'irp', title: 'Incident Response Plan (IRP)', category: 'Plan', phase: 2, status: 'pending' },    { id: 'bcdr', title: 'Business Continuity & Disaster Recovery Plan', category: 'Plan', phase: 2, status: 'pending' },    { id: 'roles', title: 'Roles and Responsibilities Document', category: 'Governance', phase: 2, status: 'pending' },    { id: 'hr-procedures', title: 'HR Cybersecurity Procedures', category: 'Procedure', phase: 2, status: 'pending' },        // Phase 3 Documents    { id: 'asset-inventory', title: 'Asset Inventory Template', category: 'Template', phase: 3, status: 'pending' },    { id: 'iam-policy', title: 'Identity & Access Management Policy', category: 'Policy', phase: 3, status: 'pending' },    { id: 'network-security', title: 'Network Security Policy', category: 'Policy', phase: 3, status: 'pending' },    { id: 'data-protection', title: 'Data Protection Policy', category: 'Policy', phase: 3, status: 'pending' },    { id: 'email-security', title: 'Email Security Policy', category: 'Policy', phase: 3, status: 'pending' },        // Phase 4 Documents    { id: 'logging-policy', title: 'Logging and Monitoring Policy', category: 'Policy', phase: 4, status: 'pending' },    { id: 'vuln-mgmt', title: 'Vulnerability Management Procedures', category: 'Procedure', phase: 4, status: 'pending' },    { id: 'awareness-program', title: 'Security Awareness Program', category: 'Program', phase: 4, status: 'pending' },        // Phase 5 Documents    { id: 'third-party', title: 'Third-Party Security Requirements', category: 'Requirements', phase: 5, status: 'pending' },    { id: 'cloud-policy', title: 'Cloud Security Policy', category: 'Policy', phase: 5, status: 'pending' },    { id: 'ics-security', title: 'ICS/OT Security Plan', category: 'Plan', phase: 5, status: 'pending' },        // Phase 6-7 Documents    { id: 'review-schedule', title: 'Annual Review Schedule', category: 'Schedule', phase: 6, status: 'pending' },    { id: 'audit-checklist', title: 'Audit Checklist', category: 'Checklist', phase: 7, status: 'pending' },  ])    const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {    const file = e.target.files?.[0]    if (file) {      const reader = new FileReader()      reader.onloadend = () => {        setCompanyInfo(prev => ({ ...prev, logo: reader.result as string }))        toast.success('Logo uploaded successfully')      }      reader.readAsDataURL(file)    }  }    const handleGenerateDocuments = () => {    if (!companyInfo.name || !companyInfo.managerName) {      toast.error('Please fill in all required fields')      return    }        const generatedDocs = generateAllDocuments(companyInfo)        setDocuments(prevDocs =>       prevDocs.map(doc => ({        ...doc,        status: 'generated',        content: generatedDocs[doc.id]      }))    )        toast.success('All documents generated successfully!')  }    const downloadDocument = (doc: Document) => {    if (!doc.content) return        const blob = new Blob([doc.content], { type: 'text/html;charset=utf-8' })    const url = URL.createObjectURL(blob)    const link = document.createElement('a')    link.href = url    link.download = `${companyInfo.name.replace(/\s+/g, '_')}_${doc.id}.html`    document.body.appendChild(link)    link.click()    document.body.removeChild(link)    URL.revokeObjectURL(url)        toast.success(`Downloaded ${doc.title}`)  }    const downloadAllDocuments = () => {    const generatedDocs = documents.filter(doc => doc.status === 'generated')    if (generatedDocs.length === 0) {      toast.error('Please generate documents first')      return    }        generatedDocs.forEach(doc => {      setTimeout(() => downloadDocument(doc), 100)    })  }    const getPhaseDocuments = (phase: number) =>     documents.filter(doc => doc.phase === phase)  return (    <div className="container mx-auto py-8 px-4">      <Card className="mb-8 border-primary/20">        <CardHeader>          <CardTitle className="flex items-center gap-2">            <FileText className="h-6 w-6 text-primary" />            NCA ECC Document Generator          </CardTitle>          <CardDescription>            Generate all required ECC framework documents with your company information          </CardDescription>        </CardHeader>        <CardContent>          <div className="grid gap-6 md:grid-cols-3">            <div className="space-y-2">              <Label htmlFor="company-name">                <Building2 className="inline h-4 w-4 mr-2" />                Company Name *              </Label>              <Input                id="company-name"                value={companyInfo.name}                onChange={(e) => setCompanyInfo(prev => ({ ...prev, name: e.target.value }))}                placeholder="Enter company name"              />            </div>                        <div className="space-y-2">              <Label htmlFor="manager-name">                <User className="inline h-4 w-4 mr-2" />                Manager/CISO Name *              </Label>              <Input                id="manager-name"                value={companyInfo.managerName}                onChange={(e) => setCompanyInfo(prev => ({ ...prev, managerName: e.target.value }))}                placeholder="Enter manager name"              />            </div>                        <div className="space-y-2">              <Label htmlFor="logo-upload">                <Image className="inline h-4 w-4 mr-2" />                Company Logo              </Label>              <div className="flex gap-2">                <Input                  id="logo-upload"                  type="file"                  accept="image/*"                  onChange={handleLogoUpload}                  className="flex-1"                />                {companyInfo.logo && (                  <CheckCircle className="h-5 w-5 text-success mt-2" />                )}              </div>            </div>          </div>                    <div className="flex gap-4 mt-6">            <Button               onClick={handleGenerateDocuments}              disabled={!companyInfo.name || !companyInfo.managerName}              className="flex-1"            >              <FileText className="mr-2 h-4 w-4" />              Generate All Documents            </Button>                        <Button               onClick={downloadAllDocuments}              variant="outline"              disabled={documents.every(doc => doc.status === 'pending')}            >              <Download className="mr-2 h-4 w-4" />              Download All            </Button>          </div>        </CardContent>      </Card>            <Card>        <CardHeader>          <CardTitle>Generated Documents by Phase</CardTitle>          <CardDescription>            Review and download individual documents for each implementation phase          </CardDescription>        </CardHeader>        <CardContent>          <Tabs defaultValue="phase1" className="w-full">            <TabsList className="grid grid-cols-7 w-full">              {[1, 2, 3, 4, 5, 6, 7].map(phase => (                <TabsTrigger key={phase} value={`phase${phase}`}>                  Phase {phase}                </TabsTrigger>              ))}            </TabsList>                        {[1, 2, 3, 4, 5, 6, 7].map(phase => (              <TabsContent key={phase} value={`phase${phase}`}>                <ScrollArea className="h-[400px] pr-4">                  <div className="space-y-3">                    {getPhaseDocuments(phase).map(doc => (                      <Card key={doc.id} className="border-border/50">                        <CardContent className="flex items-center justify-between p-4">                          <div className="flex items-center gap-3">                            <FileText className="h-5 w-5 text-primary" />                            <div>                              <p className="font-medium">{doc.title}</p>                              <div className="flex gap-2 mt-1">                                <Badge variant="secondary" className="text-xs">                                  {doc.category}                                </Badge>                                <Badge                                   variant={doc.status === 'generated' ? 'success' : 'outline'}                                  className="text-xs"                                >                                  {doc.status === 'generated' ? 'Generated' : 'Pending'}                                </Badge>                              </div>                            </div>                          </div>                                                    <Button                            size="sm"                            variant="outline"                            onClick={() => downloadDocument(doc)}                            disabled={doc.status === 'pending'}                          >                            <Download className="h-4 w-4" />                          </Button>                        </CardContent>                      </Card>                    ))}                  </div>                </ScrollArea>              </TabsContent>            ))}          </Tabs>        </CardContent>      </Card>    </div>  )}‎src/lib/documentTemplates.tsCopy file name to clipboardExpand all lines: src/lib/documentTemplates.ts+1,010Lines changed: 1010 additions & 0 deletions Load DiffLarge diffs are not rendered by default.‎src/pages/Index.tsxCopy file name to clipboard+16-1Lines changed: 16 additions & 1 deletionOriginal file line numberDiff line numberDiff line change@@ -1,7 +1,22 @@import { Dashboard } from "@/components/Dashboard"import DocumentGenerator from "@/components/DocumentGenerator"import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"const Index = () => {  return <Dashboard />  return (    <Tabs defaultValue="dashboard" className="w-full">      <TabsList className="grid w-full grid-cols-2 max-w-md mx-auto mb-8">        <TabsTrigger value="dashboard">Implementation Workflow</TabsTrigger>        <TabsTrigger value="documents">Document Generator</TabsTrigger>      </TabsList>      <TabsContent value="dashboard">        <Dashboard />      </TabsContent>      <TabsContent value="documents">        <DocumentGenerator />      </TabsContent>    </Tabs>  )}export default Index
0 commit commentsComments0 (0)Lock conversationComment