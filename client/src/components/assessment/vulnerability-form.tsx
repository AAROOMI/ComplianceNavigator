import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { ncaEccDomains, ncaEccStructure } from "@shared/schema";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useState } from "react";

const statusOptions = [
  { label: "Compliant", value: "compliant" },
  { label: "Partially Compliant", value: "partially-compliant" },
  { label: "Non-Compliant", value: "non-compliant" }
];

const impactOptions = [
  { label: "Critical", value: "critical" },
  { label: "High", value: "high" },
  { label: "Medium", value: "medium" },
  { label: "Low", value: "low" }
];

const formSchema = z.object({
  domain: z.string().min(1, "Domain is required"),
  subdomain: z.string().min(1, "Subdomain is required"),
  control: z.string().min(1, "Control is required"),
  status: z.enum(["compliant", "partially-compliant", "non-compliant"]),
  impact: z.enum(["critical", "high", "medium", "low"]),
  description: z.string().min(1, "Description is required"),
  remediation: z.string().min(1, "Remediation is required"),
  timeline: z.string().optional(),
});

type FormData = z.infer<typeof formSchema>;

interface VulnerabilityFormProps {
  assessmentId: number;
  userId: number;
  onSuccess?: () => void;
}

export default function VulnerabilityForm({ assessmentId, userId, onSuccess }: VulnerabilityFormProps) {
  const { toast } = useToast();
  const [subdomains, setSubdomains] = useState<string[]>([]);
  const [controls, setControls] = useState<string[]>([]);

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      domain: "",
      subdomain: "",
      control: "",
      status: "non-compliant",
      impact: "high",
      description: "",
      remediation: "",
      timeline: ""
    },
  });

  // Calculate risk based on status and impact
  function calculateRisk(status: string, impact: string): number {
    const impactScores = {
      "critical": 10,
      "high": 8,
      "medium": 5,
      "low": 2
    };
    
    const statusMultipliers = {
      "compliant": 0,
      "partially-compliant": 0.5,
      "non-compliant": 1
    };
    
    // @ts-ignore
    const impactScore = impactScores[impact] || 5;
    // @ts-ignore
    const statusMultiplier = statusMultipliers[status] || 0.5;
    
    return Math.round(impactScore * statusMultiplier);
  }

  // Handle domain change to update subdomains
  function handleDomainChange(domain: string) {
    form.setValue("domain", domain);
    form.setValue("subdomain", "");
    form.setValue("control", "");
    
    // @ts-ignore
    const domainSubdomains = Object.keys(ncaEccStructure[domain] || {});
    setSubdomains(domainSubdomains);
    setControls([]);
  }

  // Handle subdomain change to update controls
  function handleSubdomainChange(subdomain: string) {
    form.setValue("subdomain", subdomain);
    form.setValue("control", "");
    
    const domain = form.getValues("domain");
    // @ts-ignore
    const subdomainControls = ncaEccStructure[domain]?.[subdomain] || [];
    setControls(subdomainControls);
  }

  async function onSubmit(data: FormData) {
    try {
      // Calculate risk score based on status and impact
      const riskScore = calculateRisk(data.status, data.impact);

      // Create vulnerability entry
      await apiRequest('POST', '/api/vulnerabilities', {
        userId: userId,
        assessmentId: assessmentId,
        domain: data.domain,
        subdomain: data.subdomain,
        control: data.control,
        status: data.status,
        impact: data.impact,
        risk: riskScore.toString(),
        description: data.description,
        remediation: data.remediation,
        timeline: data.timeline || "",
        createdAt: new Date().toISOString()
      });

      toast({
        title: "Vulnerability Added",
        description: "The vulnerability has been documented.",
      });

      // Reset form
      form.reset({
        domain: "",
        subdomain: "",
        control: "",
        status: "non-compliant",
        impact: "high",
        description: "",
        remediation: "",
        timeline: ""
      });

      // Invalidate queries to refresh data
      queryClient.invalidateQueries({ queryKey: ['/api/vulnerabilities'] });
      
      // Call success callback if provided
      if (onSuccess) {
        onSuccess();
      }
    } catch (error) {
      console.error("Error adding vulnerability:", error);
      toast({
        title: "Error",
        description: "Failed to add vulnerability.",
        variant: "destructive"
      });
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <Card>
          <CardContent className="pt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField
                control={form.control}
                name="domain"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Domain</FormLabel>
                    <Select 
                      onValueChange={(value) => handleDomainChange(value)} 
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a domain" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {ncaEccDomains.map((domain) => (
                          <SelectItem key={domain} value={domain}>{domain}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="subdomain"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Subdomain</FormLabel>
                    <Select 
                      onValueChange={(value) => handleSubdomainChange(value)} 
                      defaultValue={field.value}
                      disabled={subdomains.length === 0}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a subdomain" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {subdomains.map((subdomain) => (
                          <SelectItem key={subdomain} value={subdomain}>{subdomain}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="control"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Control</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                      disabled={controls.length === 0}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a control" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {controls.map((control) => (
                          <SelectItem key={control} value={control}>{control}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Compliance Status</FormLabel>
                    <FormControl>
                      <RadioGroup
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                        className="flex flex-col gap-2"
                      >
                        {statusOptions.map((option) => (
                          <FormItem key={option.value} className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value={option.value} />
                            </FormControl>
                            <FormLabel className="font-normal">{option.label}</FormLabel>
                          </FormItem>
                        ))}
                      </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="impact"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Impact Level</FormLabel>
                    <FormControl>
                      <RadioGroup
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                        className="flex flex-col gap-2"
                      >
                        {impactOptions.map((option) => (
                          <FormItem key={option.value} className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value={option.value} />
                            </FormControl>
                            <FormLabel className="font-normal">{option.label}</FormLabel>
                          </FormItem>
                        ))}
                      </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="md:col-span-2">
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Vulnerability Description</FormLabel>
                      <FormControl>
                        <Textarea 
                          placeholder="Describe the vulnerability and its details"
                          className="min-h-[120px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="md:col-span-2">
                <FormField
                  control={form.control}
                  name="remediation"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Remediation Steps</FormLabel>
                      <FormControl>
                        <Textarea 
                          placeholder="Describe the recommended remediation steps"
                          className="min-h-[120px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="timeline"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Remediation Timeline</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="e.g., 30 days, 3 months, Q4 2023"
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Suggested timeframe to address this vulnerability
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          </CardContent>
        </Card>

        <Button type="submit" className="w-full">Document Vulnerability</Button>
      </form>
    </Form>
  );
}