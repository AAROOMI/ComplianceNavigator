import { useQuery } from "@tanstack/react-query";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { AlertTriangle, CheckCircle, HelpCircle, FileText, Printer } from "lucide-react";
import { useState } from "react";
import { type Vulnerability } from "@shared/schema";

interface VulnerabilityTableProps {
  userId: number;
  assessmentId?: number;
  domain?: string;
  showPrintButton?: boolean;
}

export default function VulnerabilityTable({ userId, assessmentId, domain, showPrintButton = true }: VulnerabilityTableProps) {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);

  // Fetch vulnerabilities based on props
  const { data: vulnerabilities, isLoading, error } = useQuery({
    queryKey: assessmentId 
      ? ['/api/vulnerabilities', userId, assessmentId] 
      : domain 
        ? ['/api/vulnerabilities', userId, 'domain', domain] 
        : ['/api/vulnerabilities', userId],
    queryFn: async () => {
      let url = `/api/vulnerabilities/${userId}`;
      if (assessmentId) {
        url += `?assessmentId=${assessmentId}`;
      } else if (domain) {
        url = `/api/vulnerabilities/${userId}/domain/${encodeURIComponent(domain)}`;
      }
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error('Failed to fetch vulnerabilities');
      }
      return response.json() as Promise<Vulnerability[]>;
    }
  });

  // Function to render status badge with appropriate color
  function renderStatusBadge(status: string) {
    switch (status) {
      case 'compliant':
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Compliant</Badge>;
      case 'partially-compliant':
        return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">Partially Compliant</Badge>;
      case 'non-compliant':
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200">Non-Compliant</Badge>;
      default:
        return <Badge variant="outline">Unknown</Badge>;
    }
  }

  // Function to render impact badge with appropriate color
  function renderImpactBadge(impact: string) {
    switch (impact) {
      case 'critical':
        return <Badge className="bg-red-600">Critical</Badge>;
      case 'high':
        return <Badge className="bg-orange-500">High</Badge>;
      case 'medium':
        return <Badge className="bg-yellow-500">Medium</Badge>;
      case 'low':
        return <Badge className="bg-blue-500">Low</Badge>;
      default:
        return <Badge>Unknown</Badge>;
    }
  }

  // Function to get risk level label and color from numeric score
  function getRiskLevelFromScore(score: string) {
    const numericScore = parseInt(score, 10);
    if (numericScore >= 8) {
      return { label: "Critical", color: "text-red-600" };
    } else if (numericScore >= 5) {
      return { label: "High", color: "text-orange-500" };
    } else if (numericScore >= 3) {
      return { label: "Medium", color: "text-yellow-600" };
    } else {
      return { label: "Low", color: "text-blue-500" };
    }
  }

  // Function to print the current report
  function printReport() {
    const printWindow = window.open('', '_blank');
    if (!printWindow) return;

    const reportContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Vulnerability Assessment Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          h1 { color: #333; }
          table { border-collapse: collapse; width: 100%; margin-top: 20px; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
          .critical { color: #e11d48; }
          .high { color: #f97316; }
          .medium { color: #eab308; }
          .low { color: #3b82f6; }
          .report-header { padding: 20px 0; border-bottom: 2px solid #333; margin-bottom: 20px; }
          .report-footer { margin-top: 30px; padding-top: 10px; border-top: 1px solid #ddd; font-size: 12px; }
          .risk-details { margin-top: 40px; }
          .sub-header { background-color: #f9f9f9; padding: 5px; font-weight: bold; margin-top: 10px; }
        </style>
      </head>
      <body>
        <div class="report-header">
          <h1>Vulnerability Assessment Report</h1>
          <p>Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
          ${domain ? `<p>Domain: ${domain}</p>` : ''}
          ${assessmentId ? `<p>Assessment ID: ${assessmentId}</p>` : ''}
        </div>
        
        <h2>Vulnerabilities Summary</h2>
        <table>
          <thead>
            <tr>
              <th>Domain</th>
              <th>Subdomain</th>
              <th>Control</th>
              <th>Status</th>
              <th>Impact</th>
              <th>Risk Level</th>
            </tr>
          </thead>
          <tbody>
            ${vulnerabilities?.map(v => {
              const riskLevel = getRiskLevelFromScore(v.risk);
              return `
                <tr>
                  <td>${v.domain}</td>
                  <td>${v.subdomain}</td>
                  <td>${v.control}</td>
                  <td>${v.status}</td>
                  <td>${v.impact}</td>
                  <td class="${riskLevel.color.replace('text-', '')}">${riskLevel.label}</td>
                </tr>
              `;
            }).join('') || ''}
          </tbody>
        </table>
        
        <div class="risk-details">
          <h2>Detailed Findings</h2>
          ${vulnerabilities?.map(v => {
            const riskLevel = getRiskLevelFromScore(v.risk);
            return `
              <div>
                <div class="sub-header">${v.domain} > ${v.subdomain} > ${v.control}</div>
                <p><strong>Status:</strong> ${v.status}</p>
                <p><strong>Impact:</strong> ${v.impact}</p>
                <p><strong>Risk Level:</strong> <span class="${riskLevel.color.replace('text-', '')}">${riskLevel.label}</span></p>
                <p><strong>Description:</strong> ${v.description}</p>
                <p><strong>Remediation:</strong> ${v.remediation}</p>
                <p><strong>Timeline:</strong> ${v.timeline || 'Not specified'}</p>
                <hr>
              </div>
            `;
          }).join('') || ''}
        </div>
        
        <div class="report-footer">
          <p>This report contains confidential information about security vulnerabilities. Handle with care.</p>
          <p>Generated by NCA ECC Compliance Platform</p>
        </div>
      </body>
      </html>
    `;

    printWindow.document.open();
    printWindow.document.write(reportContent);
    printWindow.document.close();
    
    // Wait for content to load then print
    printWindow.onload = function() {
      printWindow.print();
    };
  }

  // Loading state
  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between">
            <Skeleton className="h-8 w-1/3" />
            <Skeleton className="h-8 w-24" />
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Skeleton className="h-[300px] w-full" />
        </CardContent>
      </Card>
    );
  }

  // Error state
  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerabilities</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center py-10 text-center">
            <AlertTriangle className="h-10 w-10 text-yellow-500 mb-4" />
            <h3 className="text-lg font-semibold">Error Loading Vulnerabilities</h3>
            <p className="mt-2 text-sm text-gray-500">
              There was a problem retrieving the vulnerability data.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Empty state
  if (!vulnerabilities || vulnerabilities.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerabilities</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center py-10 text-center">
            <CheckCircle className="h-10 w-10 text-green-500 mb-4" />
            <h3 className="text-lg font-semibold">No Vulnerabilities Found</h3>
            <p className="mt-2 text-sm text-gray-500">
              No vulnerabilities have been documented for this assessment yet.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>Vulnerabilities {domain ? `- ${domain}` : ''}</span>
          {showPrintButton && (
            <Button variant="outline" onClick={printReport} className="flex items-center gap-1">
              <Printer className="h-4 w-4" />
              <span>Print Report</span>
            </Button>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Domain</TableHead>
                <TableHead>Subdomain</TableHead>
                <TableHead>Control</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Impact</TableHead>
                <TableHead>Risk Level</TableHead>
                <TableHead>Details</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {vulnerabilities.map((vulnerability) => {
                const riskLevel = getRiskLevelFromScore(vulnerability.risk);
                return (
                  <TableRow key={vulnerability.id}>
                    <TableCell>{vulnerability.domain}</TableCell>
                    <TableCell>{vulnerability.subdomain}</TableCell>
                    <TableCell className="max-w-[200px] truncate" title={vulnerability.control}>
                      {vulnerability.control}
                    </TableCell>
                    <TableCell>{renderStatusBadge(vulnerability.status)}</TableCell>
                    <TableCell>{renderImpactBadge(vulnerability.impact)}</TableCell>
                    <TableCell className={`font-medium ${riskLevel.color}`}>
                      {riskLevel.label}
                    </TableCell>
                    <TableCell>
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => setSelectedVulnerability(vulnerability)}
                      >
                        <FileText className="h-4 w-4" />
                      </Button>
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </div>

        {selectedVulnerability && (
          <div className="mt-6 border rounded-md p-4">
            <div className="flex justify-between items-start mb-4">
              <h3 className="text-lg font-semibold">{selectedVulnerability.control}</h3>
              <Button variant="ghost" size="sm" onClick={() => setSelectedVulnerability(null)}>
                Close
              </Button>
            </div>
            
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <h4 className="font-medium text-sm text-gray-500">Description</h4>
                <p className="mt-1">{selectedVulnerability.description}</p>
              </div>
              
              <div>
                <h4 className="font-medium text-sm text-gray-500">Remediation</h4>
                <p className="mt-1">{selectedVulnerability.remediation}</p>
              </div>
              
              <div>
                <h4 className="font-medium text-sm text-gray-500">Timeline</h4>
                <p className="mt-1">{selectedVulnerability.timeline || 'Not specified'}</p>
              </div>
              
              <div>
                <h4 className="font-medium text-sm text-gray-500">Documented On</h4>
                <p className="mt-1">{new Date(selectedVulnerability.createdAt).toLocaleDateString()}</p>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}