import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from "recharts";
import { AlertTriangle, ShieldCheck, ShieldAlert, FileText, ExternalLink } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { Link } from "wouter";
import { useState, useEffect } from "react";
import { type Vulnerability } from "@shared/schema";

interface VulnerabilitySummaryProps {
  userId: number;
}

export default function VulnerabilitySummary({ userId }: VulnerabilitySummaryProps) {
  const [vulnerabilityStats, setVulnerabilityStats] = useState<{
    total: number;
    byDomain: Record<string, number>;
    byRisk: Record<string, number>;
    byStatus: Record<string, number>;
    highestRiskDomains: Array<{ domain: string; count: number; color: string }>;
  }>({
    total: 0,
    byDomain: {},
    byRisk: {},
    byStatus: {},
    highestRiskDomains: []
  });

  // Fetch all vulnerabilities
  const { data: vulnerabilities, isLoading, error } = useQuery({
    queryKey: ['/api/vulnerabilities', userId],
    queryFn: async () => {
      const response = await fetch(`/api/vulnerabilities/${userId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch vulnerabilities');
      }
      return response.json() as Promise<Vulnerability[]>;
    }
  });

  // Process vulnerability data when it changes
  useEffect(() => {
    if (!vulnerabilities || vulnerabilities.length === 0) return;

    const byDomain: Record<string, number> = {};
    const byRisk: Record<string, number> = { "Critical": 0, "High": 0, "Medium": 0, "Low": 0 };
    const byStatus: Record<string, number> = { "compliant": 0, "partially-compliant": 0, "non-compliant": 0 };
    
    // Calculate statistics
    vulnerabilities.forEach(v => {
      // Count by domain
      byDomain[v.domain] = (byDomain[v.domain] || 0) + 1;
      
      // Count by status
      byStatus[v.status] = (byStatus[v.status] || 0) + 1;
      
      // Determine risk level from score
      const score = parseInt(v.risk, 10);
      let riskLevel = "Low";
      if (score >= 8) riskLevel = "Critical";
      else if (score >= 5) riskLevel = "High";
      else if (score >= 3) riskLevel = "Medium";
      
      byRisk[riskLevel] = (byRisk[riskLevel] || 0) + 1;
    });

    // Format for chart
    const domainColors = {
      "Governance": "#4f46e5",
      "Cybersecurity Defence": "#2563eb",
      "Cybersecurity Resilience": "#0284c7",
      "Third Party Cloud Computing Cybersecurity": "#0891b2",
      "Industrial Control System (ICS)": "#0d9488"
    };

    const highestRiskDomains = Object.entries(byDomain)
      .map(([domain, count]) => ({
        domain,
        count,
        // @ts-ignore
        color: domainColors[domain] || "#9333ea"
      }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    setVulnerabilityStats({
      total: vulnerabilities.length,
      byDomain,
      byRisk,
      byStatus,
      highestRiskDomains
    });
  }, [vulnerabilities]);

  // Calculate compliance percentage
  const getCompliancePercentage = (): number => {
    if (vulnerabilityStats.total === 0) return 100;
    const compliantCount = vulnerabilityStats.byStatus['compliant'] || 0;
    const partiallyCount = (vulnerabilityStats.byStatus['partially-compliant'] || 0) / 2;
    return Math.round((compliantCount + partiallyCount) / vulnerabilityStats.total * 100);
  };

  // Get progress color based on percentage
  const getProgressColor = (percentage: number): string => {
    if (percentage >= 80) return "bg-green-500";
    if (percentage >= 60) return "bg-yellow-500";
    return "bg-red-500";
  };

  // Loading state
  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle><Skeleton className="h-8 w-3/4" /></CardTitle>
          <CardDescription><Skeleton className="h-4 w-1/2" /></CardDescription>
        </CardHeader>
        <CardContent>
          <Skeleton className="h-[200px] w-full" />
        </CardContent>
      </Card>
    );
  }

  // Error state
  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Summary</CardTitle>
          <CardDescription>Error loading vulnerability data</CardDescription>
        </CardHeader>
        <CardContent>
          <Alert variant="destructive">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>
              There was a problem fetching vulnerability data. Please try again later.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }

  // Empty state
  if (!vulnerabilities || vulnerabilities.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerability Summary</CardTitle>
          <CardDescription>No vulnerabilities have been documented yet</CardDescription>
        </CardHeader>
        <CardContent className="flex flex-col items-center text-center p-6">
          <ShieldCheck className="h-16 w-16 text-green-500 mb-4" />
          <h3 className="text-xl font-semibold mb-2">No Vulnerabilities Found</h3>
          <p className="text-muted-foreground mb-4">
            Your organization has not documented any security vulnerabilities yet.
          </p>
          <Link href="/assessment">
            <Button>
              <FileText className="mr-2 h-4 w-4" />
              Start Assessment
            </Button>
          </Link>
        </CardContent>
      </Card>
    );
  }

  // Main display with stats
  return (
    <Card>
      <CardHeader>
        <CardTitle>Vulnerability Summary</CardTitle>
        <CardDescription>Overview of your organization's security vulnerabilities</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Total Vulnerabilities</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{vulnerabilityStats.total}</div>
              <Link href="/assessment">
                <Button variant="link" className="px-0 h-auto">
                  View Details <ExternalLink className="ml-1 h-3 w-3" />
                </Button>
              </Link>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Compliance Level</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-2">
                <div className="text-2xl font-bold">{getCompliancePercentage()}%</div>
                {getCompliancePercentage() >= 80 ? (
                  <ShieldCheck className="text-green-500 h-5 w-5" />
                ) : (
                  <ShieldAlert className="text-yellow-500 h-5 w-5" />
                )}
              </div>
              <Progress value={getCompliancePercentage()} className={`h-2 mt-2 ${getProgressColor(getCompliancePercentage())}`} />
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Critical Risks</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-500">
                {vulnerabilityStats.byRisk["Critical"] || 0}
              </div>
              <div className="text-xs text-muted-foreground mt-1">
                {vulnerabilityStats.byRisk["High"] || 0} High, {vulnerabilityStats.byRisk["Medium"] || 0} Medium
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">Non-Compliant Controls</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {vulnerabilityStats.byStatus["non-compliant"] || 0}
              </div>
              <div className="text-xs text-muted-foreground mt-1">
                {vulnerabilityStats.byStatus["partially-compliant"] || 0} Partially Compliant
              </div>
            </CardContent>
          </Card>
        </div>

        <h3 className="font-medium mb-4">Vulnerabilities by Domain</h3>
        <div className="h-[250px]">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart
              data={vulnerabilityStats.highestRiskDomains}
              margin={{ top: 5, right: 30, left: 20, bottom: 60 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="domain" 
                tick={{ fontSize: 12 }}
                angle={-45}
                textAnchor="end"
                height={70}
              />
              <YAxis tick={{ fontSize: 12 }} />
              <Tooltip
                formatter={(value) => [`${value} vulnerabilities`, 'Count']}
                labelFormatter={(value) => `Domain: ${value}`}
              />
              <Bar dataKey="count" name="Vulnerabilities">
                {vulnerabilityStats.highestRiskDomains.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={entry.color} />
                ))}
              </Bar>
            </BarChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
}