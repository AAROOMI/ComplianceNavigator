import { useState, useEffect, useRef } from "react";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import QRCode from "qrcode";
import JsBarcode from "jsbarcode";
import { 
  Download, 
  Eye, 
  Share2, 
  Calendar, 
  User, 
  Building,
  Shield,
  QrCode,
  Barcode,
  FileText,
  Copy
} from "lucide-react";

interface PolicyMetadata {
  id: string;
  title: string;
  type: string;
  description: string;
  author: string;
  company: string;
  createdDate: string;
  status: string;
  priority: string;
  category: string;
  version?: string;
  lastModified?: string;
}

interface PolicyDocumentViewerProps {
  content: string;
  metadata: PolicyMetadata;
  triggerButton?: React.ReactNode;
}

export function PolicyDocumentViewer({ content, metadata, triggerButton }: PolicyDocumentViewerProps) {
  const [qrCodeDataUrl, setQrCodeDataUrl] = useState<string>("");
  const [barcodeDataUrl, setBarcodeDataUrl] = useState<string>("");
  const barcodeCanvasRef = useRef<HTMLCanvasElement>(null);
  const { toast } = useToast();

  // Generate unique document ID based on metadata
  const documentId = `DOC-${metadata.id}-${Date.now().toString().slice(-6)}`;
  const documentUrl = `${window.location.origin}/policy/${metadata.id}`;

  useEffect(() => {
    // Generate QR Code
    const generateQRCode = async () => {
      try {
        const qrData = JSON.stringify({
          id: documentId,
          title: metadata.title,
          company: metadata.company,
          url: documentUrl,
          created: metadata.createdDate,
          version: metadata.version || "1.0"
        });
        
        const qrCodeUrl = await QRCode.toDataURL(qrData, {
          width: 150,
          margin: 2,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          }
        });
        setQrCodeDataUrl(qrCodeUrl);
      } catch (error) {
        console.error('Error generating QR code:', error);
      }
    };

    // Generate Barcode
    const generateBarcode = () => {
      if (barcodeCanvasRef.current) {
        try {
          JsBarcode(barcodeCanvasRef.current, documentId, {
            format: "CODE128",
            width: 2,
            height: 60,
            displayValue: true,
            fontSize: 12,
            textMargin: 5
          });
          
          const barcodeUrl = barcodeCanvasRef.current.toDataURL();
          setBarcodeDataUrl(barcodeUrl);
        } catch (error) {
          console.error('Error generating barcode:', error);
        }
      }
    };

    generateQRCode();
    generateBarcode();
  }, [documentId, metadata, documentUrl]);

  const handleDownload = () => {
    const fullDocument = `
${content}

---

## Document Information

**Document ID:** ${documentId}
**Company:** ${metadata.company}
**Author:** ${metadata.author}
**Created:** ${metadata.createdDate}
**Status:** ${metadata.status}
**Category:** ${metadata.category}
**Version:** ${metadata.version || "1.0"}

**QR Code:** ${documentUrl}
**Barcode ID:** ${documentId}

---
*This document was generated by Metaworks Compliance Navigator*
*Â© ${new Date().getFullYear()} - All rights reserved*
    `;

    const blob = new Blob([fullDocument], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${metadata.title.replace(/\s+/g, '-')}-${documentId}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Document Downloaded",
      description: `${metadata.title} has been downloaded with QR code and barcode.`,
    });
  };

  const handleCopyDocumentId = () => {
    navigator.clipboard.writeText(documentId);
    toast({
      title: "Document ID Copied",
      description: "Document ID has been copied to clipboard.",
    });
  };

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: metadata.title,
        text: metadata.description,
        url: documentUrl
      });
    } else {
      navigator.clipboard.writeText(documentUrl);
      toast({
        title: "URL Copied",
        description: "Document URL has been copied to clipboard.",
      });
    }
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'approved': return "bg-green-100 text-green-800";
      case 'review': return "bg-yellow-100 text-yellow-800";
      case 'draft': return "bg-blue-100 text-blue-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority.toLowerCase()) {
      case 'critical': return "bg-red-100 text-red-800";
      case 'high': return "bg-orange-100 text-orange-800";
      case 'medium': return "bg-yellow-100 text-yellow-800";
      case 'low': return "bg-green-100 text-green-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        {triggerButton || (
          <Button variant="outline" size="sm">
            <Eye className="h-4 w-4 mr-2" />
            View Document
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-6xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            {metadata.title}
          </DialogTitle>
          <DialogDescription>
            {metadata.description}
          </DialogDescription>
        </DialogHeader>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-4 h-full overflow-hidden">
          {/* Document Content - Main Area */}
          <div className="lg:col-span-3 space-y-4 overflow-hidden">
            {/* Document Header */}
            <Card>
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Badge className={getStatusColor(metadata.status)}>
                      {metadata.status}
                    </Badge>
                    <Badge className={getPriorityColor(metadata.priority)}>
                      {metadata.priority} Priority
                    </Badge>
                    <Badge variant="outline">
                      v{metadata.version || "1.0"}
                    </Badge>
                  </div>
                  <div className="flex items-center gap-2">
                    <Button onClick={handleShare} size="sm" variant="outline">
                      <Share2 className="h-4 w-4" />
                    </Button>
                    <Button onClick={handleDownload} size="sm">
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>
              </CardHeader>
            </Card>

            {/* Document Content */}
            <Card className="flex-1 overflow-hidden">
              <CardContent className="p-6 h-full overflow-y-auto">
                <div className="prose prose-sm max-w-none">
                  <pre className="whitespace-pre-wrap font-sans text-sm leading-relaxed">
                    {content}
                  </pre>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar - Document Metadata and Codes */}
          <div className="lg:col-span-1 space-y-4 overflow-y-auto">
            {/* Document Information */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">Document Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 text-sm">
                <div className="flex items-center gap-2">
                  <FileText className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="font-medium">Document ID</p>
                    <div className="flex items-center gap-1">
                      <code className="text-xs bg-muted px-1 rounded">{documentId}</code>
                      <Button 
                        size="sm" 
                        variant="ghost" 
                        onClick={handleCopyDocumentId}
                        className="h-6 w-6 p-0"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <Building className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="font-medium">Company</p>
                    <p className="text-muted-foreground">{metadata.company}</p>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <User className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="font-medium">Author</p>
                    <p className="text-muted-foreground">{metadata.author}</p>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="font-medium">Created</p>
                    <p className="text-muted-foreground">{metadata.createdDate}</p>
                  </div>
                </div>

                <div>
                  <p className="font-medium">Category</p>
                  <Badge variant="outline" className="mt-1">
                    {metadata.category}
                  </Badge>
                </div>
              </CardContent>
            </Card>

            {/* QR Code */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm flex items-center gap-2">
                  <QrCode className="h-4 w-4" />
                  QR Code
                </CardTitle>
              </CardHeader>
              <CardContent className="text-center">
                {qrCodeDataUrl && (
                  <div>
                    <img 
                      src={qrCodeDataUrl} 
                      alt="QR Code" 
                      className="mx-auto mb-2 border rounded"
                    />
                    <p className="text-xs text-muted-foreground">
                      Scan for document details
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Barcode */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm flex items-center gap-2">
                  <Barcode className="h-4 w-4" />
                  Barcode
                </CardTitle>
              </CardHeader>
              <CardContent className="text-center">
                <canvas 
                  ref={barcodeCanvasRef}
                  className="mx-auto border rounded bg-white"
                />
                <p className="text-xs text-muted-foreground mt-2">
                  Document tracking ID
                </p>
              </CardContent>
            </Card>

            {/* Compliance Information */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">Compliance</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>NCA ECC Aligned</span>
                  <Badge variant="outline" className="bg-green-100 text-green-800">â</Badge>
                </div>
                <div className="flex justify-between">
                  <span>ISO 27001</span>
                  <Badge variant="outline" className="bg-green-100 text-green-800">â</Badge>
                </div>
                <div className="flex justify-between">
                  <span>NIST Framework</span>
                  <Badge variant="outline" className="bg-green-100 text-green-800">â</Badge>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}